# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: srcnn-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  profile: serverless-admin
  region: eu-north-1
  timeout: 15
  memorySize: 512
  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:*"
      Resource: "*"
  environment:
    THUMBNAIL_SIZE: "128"

# "custom" variables are for use within the YML file,
# to avoid writing the same thing in multiple locations.
custom:
  bucket: s3-srcnn-deploy-dev
  pythonRequirements:
    dockerizePip: true
    dockerRunCmdExtraArgs: ["-v", "/home/lee/tensorflow/GitProjects/srcnn-tf2/srcnn-api/wheels:/wheels"]
    #noDeploy:
    #  - boto3
    #  - botocore
    #  - docutils
    #  - jmespath
    #  - pip
    #  - python-dateutil
    #  - s3transfer
    #  - setuptools
    #  - six
    #  - tensorboard

functions:
  upscale-image:
    handler: handler.image_upscaler
    package:
      artifact:
      include:
        - handler.py
        - lite_models
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .png

plugins:
  - serverless-python-requirements

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

